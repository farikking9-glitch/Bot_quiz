from pyrogram import Client, filters
from pyrogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

import buttons
from custom_filters import button_filter
from database import init_db, add_user, add_score, get_user_score, get_rating
from keyboards import main_keyboard, settings_keyboard
from quiz import get_question
from http_client import HttpClient
import config

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Client("quiz_bot", api_id=config.API_ID, api_hash=config.API_HASH, bot_token=config.BOT_TOKEN)
http_client = HttpClient()
init_db()

# === /start ===
@bot.on_message(filters.command("start"))
async def start_handler(client, message: Message):
    add_user(message.from_user.id, message.from_user.first_name)

    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"
    )

    await message.reply(text, reply_markup=main_keyboard)  # main_keyboard —Ç–µ–ø–µ—Ä—å ReplyKeyboardMarkup

# === –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ===
@bot.on_message(filters.command("quiz") | button_filter(buttons.start_quiz_button))
async def quiz_handler(client, message: Message):
    q = get_question()
    options_text = "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(q["options"])])
    await message.reply(f"{q['question']}\n\n{options_text}\n\n–û—Ç–≤–µ—Ç—å –Ω–æ–º–µ—Ä–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    bot.correct_answer = q["answer"]

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ ===
@bot.on_message(filters.regex(r"^[1-4]$"))
async def answer_handler(client, message: Message):
    if not hasattr(bot, "correct_answer"):
        return await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∫–Ω–æ–ø–∫–æ–π '–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'", reply_markup=main_keyboard)

    index = int(message.text) - 1
    q_options = get_question()["options"]
    chosen_answer = q_options[index]
    correct_answer = bot.correct_answer

    if chosen_answer == correct_answer:
        add_score(message.from_user.id, 1)
        await message.reply("‚úÖ –í–µ—Ä–Ω–æ! +1 –æ—á–∫–æ", reply_markup=main_keyboard)
    else:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}", reply_markup=main_keyboard)

    del bot.correct_answer

# === –°—á—ë—Ç ===
@bot.on_message(filters.command("score") | button_filter(buttons.score_button))
async def score_handler(client, message: Message):
    score = get_user_score(message.from_user.id)
    await message.reply(f"üèÜ –£ —Ç–µ–±—è {score} –æ—á–∫–æ–≤", reply_markup=main_keyboard)

# === –†–µ–π—Ç–∏–Ω–≥ ===
@bot.on_message(filters.command("rating") | button_filter(buttons.rating_button))
async def rating_handler(client, message: Message):
    data = get_rating()
    if not data:
        return await message.reply("üòÖ –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤", reply_markup=main_keyboard)

    text = "üèÖ *–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:*\n\n"
    for i, (name, score) in enumerate(data, start=1):
        text += f"{i}. {name} ‚Äî {score} –æ—á–∫–æ–≤\n"
    await message.reply(text, reply_markup=main_keyboard)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ / –ø–æ–º–æ—â—å ===
@bot.on_message(filters.command(["settings", "help"]) | button_filter(buttons.settings_button) | button_filter(buttons.help_button))
async def settings_command(client, message: Message):
    text = "‚öôÔ∏è –ó–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n\n–¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
    await message.reply(text, reply_markup=settings_keyboard)

@bot.on_message()
async def unknown_message(client: Client, message: Message):
    await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
# === –ó–∞–ø—É—Å–∫ ===
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã...")
bot.run()
